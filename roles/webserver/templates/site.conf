set_real_ip_from  172.28.0.0/16;
real_ip_header    X-Forwarded-For;
real_ip_recursive on;

client_max_body_size {{ webserver_client_max_body_size }};
chunked_transfer_encoding on;

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    ''      $scheme;
}

# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
    default $http_x_forwarded_port;
    ''      $server_port;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
    default upgrade;
    '' close;
}

# Set appropriate X-Forwarded-Ssl header
map $http_x_forwarded_ssl $proxy_x_forwarded_ssl {
    default $http_x_forwarded_ssl;
    '' $https;
}

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";

# log format with application performance metrics in logfmt style
log_format apm 't="$time_iso8601" h=$host u=$remote_user client=$remote_addr '
  'status=$status '
  'request="$request" '
  'req_time=$request_time '
  'ua="$http_user_agent" '
  'method=$request_method '
  'req_length=$request_length '
  'bytes_sent=$bytes_sent '
  'body_bytes_sent=$body_bytes_sent '
  'referer="$http_referer" '
  'us_addr=$upstream_addr '
  'us_status=$upstream_status '
  'us_connect_time=$upstream_connect_time '
  'us_header_time=$upstream_header_time '
  'us_response_time=$upstream_response_time ';

server {
    listen 8080;
    index index.php index.html index.htm ;
    server_name localhost;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log apm;
    root /code/{{ webserver_document_root }};

    # workaround with variable for dynamic resolve, not just at startup
    resolver 127.0.0.11 valid=10s; # 127.0.0.11 comes from /etc/resolv.conf on the nginx container
    set $resolve_php php;
    set $resolve_myadmin myadmin;

    location / {
        try_files $uri $uri/ /index.php$is_args$args =404;
    }
{% if webserver_php_enable %}
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass $resolve_php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
{% endif %}

{% if webserver_myadmin_enable %}
    location /.myadmin/ {
        # need to remove prefix and pass corrected uri manually when using variables in proxy_pass
        rewrite    ^/.myadmin/(.*) /$1 break;
        proxy_pass http://$resolve_myadmin:80/$uri$is_args$args;
        auth_basic           "Restricted Admin";
        auth_basic_user_file /etc/nginx/conf.d/htaccess/htpasswd_myadmin;
        client_max_body_size {{ webserver_myadmin_max_upload }};
    }
{% endif %}
}
