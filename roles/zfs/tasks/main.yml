- name: Check if zfs is installed
  stat:
    path: /usr/sbin/zpool
  changed_when: false
  check_mode: false
  register: zfs_reg__zpool_stat
  tags:
    - zfs
    - zpool

- name: collect zpool facts
  zpool_facts: {}
  when: zfs_reg__zpool_stat.stat.exists | bool
  tags:
    - zfs
    - zpool


# - name: debug0
#   changed_when: true
#   debug:
#     var: ansible_zfs_pools

# - name: debug1
#   changed_when: true
#   debug:
#     var: ansible_zfs_pools | json_query('[*].name')

- name: list of zpools on system
  set_fact:
    zfs_fact_zfs_pools: "{{ ansible_zfs_pools | json_query('[*].name') }}"

# - name: debug2
#   changed_when: true
#   debug:
#     msg: "manage: {{ item }}"
#   when: "item in ansible_zfs_pools | json_query('[*].name')"
#   loop: "{{ zfs_managed_pools }}"

- name: manage zpools
  loop: '{{ zfs_managed_pools }}'
  loop_control:
    loop_var: zpool
  when:
    - "ansible_zfs_pools is defined"
    - "zpool in zfs_fact_zfs_pools"
  tags: zfs
  vars:
    zfs_zpool__zpool_facts: "{{ ansible_zfs_pools | selectattr('name', 'equalto', zpool) | list | first }}"
  include_tasks:
    file: zpool.yml
    apply:
      tags:
        - zfs
        - zpool

# manage zfs datasets
- name: create zfs datasets
  zfs:
    name: '{{ item.name }}'
    state: present
    extra_zfs_properties: '{{ [zfs_extra_zfs_properties_default, item.extra_zfs_properties | default({})] | combine }}'
  loop: '{{ zfs_datasets }}'
  tags:
    - zfs

# manage zfs admin delegation
- name: set admin delegation for {{ item.key }}
  community.general.zfs_delegate_admin:
    name: "{{ item.key }}"
    users: "{{ item.value['users'] }}"
    permissions: "{{ item.value['permissions'] }}"
    state: "{{ item.value['state'] }}"
    descendents: "{{ item.value['descendents'] }}"
    everyone: "{{ item.value['everyone'] }}"
    local: "{{ item.value['local'] }}"
    recursive: "{{ item.value['recursive'] }}"
  loop: '{{ zfs_delegate | dict2items }}'
  when: zfs_delegate is defined
  tags:
    - zfs

- name: Deploy zfs snap metrics script
  copy:
    src: zfs_snap_metrics.sh
    dest: /usr/local/bin/zfs_snap_metrics.sh
    owner: root
    group: root
    mode: '0750'
  when:
    - zfs_reg__zpool_stat.stat.exists
  tags:
    - zfs

- name: Cronjob for zfs snap metrics
  cron:
    name: zfs_snap_metrics
    minute: "*/5"
    hour: "*"
    user: root
    job: '/usr/local/bin/zfs_snap_metrics.sh > {{ zfs_metrics_textfile_dir }}/zfs_snap_metrics.prom.new && mv {{ zfs_metrics_textfile_dir }}/zfs_snap_metrics.prom.new {{ zfs_metrics_textfile_dir }}/zfs_snap_metrics.prom'
    cron_file: zfs_snap_metrics
  when:
    - zfs_reg__zpool_stat.stat.exists
  tags:
    - zfs

- name: Deploy zfs dataset property metrics script
  copy:
    src: zfs_dataset_property_metrics.sh
    dest: /usr/local/bin/zfs_dataset_property_metrics.sh
    owner: root
    group: root
    mode: '0750'
  when:
    - zfs_reg__zpool_stat.stat.exists
    - zfs_dataset_property_metrics
  tags:
    - zfs

- name: Cronjob for zfs dataset property metrics
  vars:
    zfs__include_args: "{{ zfs_dataset_property_metrics_include_datasets | map('regex_escape') | map('regex_replace', '^', '--include-datasets ') | join(' ') }}"
    zfs__exclude_args: "{{ zfs_dataset_property_metrics_exclude_datasets | map('regex_escape') | map('regex_replace', '^', '--exclude-datasets ') | join(' ') }}"
  cron:
    name: zfs_dataset_property_metrics
    minute: "*/5"
    hour: "*"
    user: root
    job: '/usr/local/bin/zfs_dataset_property_metrics.sh {{ zfs__include_args }} {{ zfs__exclude_args }} > {{ zfs_metrics_textfile_dir }}/zfs_dataset_property_metrics.prom.new && mv {{ zfs_metrics_textfile_dir }}/zfs_dataset_property_metrics.prom.new {{ zfs_metrics_textfile_dir }}/zfs_dataset_property_metrics.prom'
    cron_file: zfs_dataset_property_metrics
  when:
    - zfs_reg__zpool_stat.stat.exists
    - zfs_dataset_property_metrics
  tags:
    - zfs
