---
# default vars for prometheus role (over docker)

prometheus_domain: 'prometheus.{{ ansible_fqdn }}'
prometheus_image: prom/prometheus # public image to be used
prometheus_version: 2.37.0 # prometheus --version
prometheus_port: 9090

prometheus_global:
  scrape_interval: 15s
  scrape_timeout: 10s
  evaluation_interval: 30s # evaluate rules

prometheus_webproxy_path: '{{ webproxy_path | default("/container/webproxy") }}'

prometheus_config_dir: /container/prometheus
prometheus_config_dir_container: /etc/prometheus
prometheus_db_dir: /container/prometheus/data

prometheus_storage_retention: "30d"

prometheus_external_labels:
  scraper_instance: "{{ ansible_fqdn | default(ansible_host) | default(inventory_hostname) }}"

prometheus_http_scrape_interval: 1m

prometheus_scrape_configs:
  - job_name: "netdata"
    metrics_path: /api/v1/allmetrics
    params:
      format: [prometheus]
    honor_labels: true
    relabel_configs:
        # turn instance into short hostname, instead of FQDN
      - source_labels: [__address__]
        regex: ^.*?\.(.*?)\..*$ # input: netdata.prod1.example.com:443; output: prod1
        target_label: host
    basic_auth:
      username: prometheus-netdata
      password: "{{ netdata_prometheus_password }}"
    scheme: https
    file_sd_configs:
      - files:
          - "{{ prometheus_config_dir_container }}/file_sd/*.netdata.yml"

  - job_name: 'http_2xx'
    scrape_interval: "{{ prometheus_http_scrape_interval }}"
    metrics_path: /probe
    params:
      module: [http_2xx]  # look for a HTTP 200 response.
    # every blackbox job needs relabel_configs
    relabel_configs:
      - source_labels: [__address__]
        regex: ^https?:\/\/([^?/:]+).*$ # extract domain, input: https://netdata.prod1.example.com:443/?foo=asdf; output: netdata.prod1.example.com
        target_label: host
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox:9115 # the blackbox exporter's real hostname:port. Hostname = name of service within docker-compose
    file_sd_configs:
      - files:
          - "{{ prometheus_config_dir_container }}/file_sd/*.http_2xx.yml"

  - job_name: 'http_401'
    scrape_interval: "{{ prometheus_http_scrape_interval }}"
    metrics_path: /probe
    params:
      module: [http_401]  # look for a HTTP 401 (Authentication Required) response.
    # every blackbox job needs relabel_configs
    relabel_configs:
      - source_labels: [__address__]
        regex: ^https?:\/\/([^?/:]+).*$ # input: https://prometheus.domain.com/; output: prometheus.domain.com
        target_label: host
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox:9115 # the blackbox exporter's real hostname:port. Hostname = name of service within docker-compose
    file_sd_configs:
      - files:
          - "{{ prometheus_config_dir_container }}/file_sd/*.http_401.yml"

  - job_name: "http_zammad"
    scrape_interval: "{{ prometheus_http_scrape_interval }}"
    metrics_path: /probe
    params:
      module: [http_zammad]
    relabel_configs:
      - source_labels: [__address__]
        regex: ^https?:\/\/([^?/:]+).*$ # input: https://zammad.domain.com/; output: zammad.domain.com
        target_label: host
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__address__]
        target_label: __param_host
      # - source_labels: [__param_target]
      #   target_label: instance
      - source_labels: [__address__]
        regex: ^(https?:\/\/[^?/:]+).*$ # input: https://zammad.domain.com/api/v1/monitoring/health_check?token=foo; output: zammad.domain.com
        target_label: instance # hide token
      - target_label: __address__
        replacement: blackbox:9115
    file_sd_configs:
      - files:
          - "{{ prometheus_config_dir_container }}/file_sd/*.http_zammad.yml"

  - job_name: "prometheus"
    metrics_path: /metrics
    relabel_configs:
      - source_labels: [__address__]
        regex: ^(localhost.*)$ # replace localhost with hostname
        replacement: '{{ ansible_hostname }}'
        target_label: host
      - source_labels: [__address__]
        regex: ^https?:\/\/([^?/:]+).*$ # extract domain, input: https://prometheus.prod1.example.com:443/?foo=asdf; output: prometheus.prod1.example.com
        target_label: host
    static_configs:
      - targets:
          - localhost:9090
    file_sd_configs:
      - files:
          - "{{ prometheus_config_dir_container }}/file_sd/*.prometheus.yml"

# define your targets, creates files in file_sd/<name>.<job>.yml
prometheus_custom_file_sd_config: []
  # - job: http_2xx
  #   name: production
  #   config:
  #     - labels:
  #         environment: production
  #       targets:
  #         - https://example.com/


prometheus_alertmanager_config:
  - scheme: https
    path_prefix: '/' # alertmanager listens directly on /, instead of the default /alertmanager
    basic_auth:
      username: "{{ prometheus_alertmanager_user }}"
      password: "{{ prometheus_alertmanager_password }}"
    static_configs:
      - targets: ["{{ prometheus_alertmanager_domain }}"]

prometheus_alert_relabel_configs: []

# for htpasswd via webproxy
# configure user in prometheus, for grafana to us it as datasource
# htpasswd -Bn grafana
prometheus_htpasswd:

# list of ansible hostgoups that should be monitored through
# netdata with docker integration (netdata.fqdn:443)
prometheus_netdata_host_groups:
  - all

# custom alert rules, use raw/endraw to prevent ansible from interpolating the go templates
prometheus_alert_rules: []
  # - alert: EndpointDown
  #   expr: 'probe_success == 0'
  #   for: 5m
  #   labels:
  #     severity: critical
  #   annotations:
  #     description: '{% raw %}{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes.{% endraw %}'
  #     summary: '{% raw %}Instance {{ $labels.instance }} down{% endraw %}'

prometheus_docker_pull: '{{ global_docker_pull | default(False) }}'
...
